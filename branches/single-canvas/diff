Index: nbproject/project.properties
===================================================================
--- nbproject/project.properties	(revision 741)
+++ nbproject/project.properties	(working copy)
@@ -1,4 +1,4 @@
-abilities=COLORS=,LOGROTATE=,FILE_TRANSFER=,SMILES=,ZLIB=,USE_ROTATOR=,ARCHIVE=,FILE_IO=,SERVICE_DISCOVERY=,SASL=,PRIVACY=,NICK_COLORS=
+abilities=HISTORY_READER=,HISTORY=,COLORS=,FILE_TRANSFER=,CLIENTS_ICONS=,CLIPBOARD=,ZLIB=,USE_ROTATOR=,POPUPS=,ARCHIVE=,SERVICE_DISCOVERY=,SASL=,PEP=,LOGROTATE=,JUICK=,SMILES=,PEP_LOCATION=,PEP_ACTIVITY=,FILE_IO=,PEP_TUNE=,NICK_COLORS=,PRIVACY=,DEBUG=
 all.configurations=\ ,Release
 application.args=
 application.description=
@@ -17,7 +17,7 @@
 configs.Release.run.method=STANDARD
 configs.Release.run.security.domain=trusted
 configs.Release.run.use.security.domain=true
-debug.level=debug
+debug.level=fatal
 deployment.instance=default
 deployment.jarurl=${dist.jar}
 deployment.method=NONE
@@ -74,17 +74,17 @@
 obfuscation.level=0
 obfuscator.destjar=${build.dir}/obfuscated.jar
 obfuscator.srcjar=${build.dir}/before-obfuscation.jar
-platform.active=Microemulator
-platform.active.description=Microemulator
-platform.apis=JSR82-1.0,MMAPI-1.0,NOKIAUI-1.0,lib/microemu-jsr-75.jar
+platform.active=S60_5th_Edition_SDK_v1_0
+platform.active.description=S60 5th Edition SDK v1.0
+platform.apis=JSR75-1.0,JSR179-1.0,MMAPI-1.0,JSR135-1.2,NOKIAUI-1.1
 bombus.bootclasspath=:bootclasspath/legacyfs.jar:bootclasspath/sielightapi.jar:bootclasspath/nokialightapi.jar
-platform.bootclasspath=${platform.home}/lib/microemu-nokiaui.jar:${platform.home}/lib/microemu-jsr-135.jar:${platform.home}/lib/microemu-jsr-82.jar:${platform.home}/lib/microemu-jsr-75.jar:${platform.home}/lib/midpapi20.jar:${platform.home}/lib/cldcapi11.jar
+platform.bootclasspath=${platform.home}/lib/jsr135.jar:${platform.home}/lib/jsr75.jar:${platform.home}/lib/jsr179.jar:${platform.home}/lib/nokiaUI.jar:${platform.home}/lib/jsr139.jar:${platform.home}/lib/midp20.jar
 platform.configuration=CLDC-1.1
-platform.device=large
+platform.device=S60Emulator
 platform.fat.jar=true
 platform.profile=MIDP-2.0
 platform.trigger=CLDC
-platform.type=CUSTOM
+platform.type=UEI-1.0.1
 preprocessed.dir=${build.dir}/preprocessed
 preverify.classes.dir=${build.dir}/preverified
 resources.dir=resources
Index: src/Archive/ArchiveList.java
===================================================================
--- src/Archive/ArchiveList.java	(revision 741)
+++ src/Archive/ArchiveList.java	(working copy)
@@ -65,7 +65,7 @@
     private TextBox t;
     
     /** Creates a new instance of ArchiveList */
-    public ArchiveList(Display display, Displayable pView, int caretPos, int where, TextBox t) {
+    public ArchiveList(int caretPos, int where, TextBox t) {
  	super ();
         this.where=where;
         this.caretPos=caretPos;
Index: src/PEP/PepForm.java
===================================================================
--- src/PEP/PepForm.java	(revision 741)
+++ src/PEP/PepForm.java	(working copy)
@@ -31,17 +31,17 @@
 //#endif
 
 //#ifdef PEP
-//#     private CheckBox sndrcvmood;
+    private CheckBox sndrcvmood;
 //#ifdef PEP_TUNE
-//#    private CheckBox rcvtune;
+   private CheckBox rcvtune;
 //#endif
 //#ifdef PEP_ACTIVITY
-//#    private CheckBox rcvactivity;
+   private CheckBox rcvactivity;
 //#endif
 //#ifdef PEP_LOCATION
-//#    private CheckBox rcvlocation;
+   private CheckBox rcvlocation;
 //#endif
-//# 
+
 //#endif
     DropChoiceBox activity;
     TextInput ti;
@@ -50,9 +50,9 @@
     public PepForm(Display display, Displayable pView) {
         super(
 //#ifdef PEP
-//#                 SR.MS_PEP
+                SR.MS_PEP
 //#else
-                ""
+//#                 ""
 //#endif
                 );
         this.display = display;
@@ -61,49 +61,49 @@
 //#ifdef PLUGINS
 //#         if (StaticData.getInstance().PEP) {
 //#endif            
-//#             itemsList.addElement(new SimpleString("Receive events", true));
-//#             sndrcvmood = new CheckBox(SR.MS_USERMOOD, Config.getInstance().sndrcvmood);
-//#             itemsList.addElement(sndrcvmood);
-//#             updmood = new LinkString(SR.MS_USERMOOD) {
-//#                 public void doAction() {
-//#                      Config.getInstance().sndrcvmood = true;
-//#                      new MoodList(midlet.BombusMod.getInstance().getDisplay());
-//#                 }
-//#             }; 
-//#             
+            itemsList.addElement(new SimpleString("Receive events", true));
+            sndrcvmood = new CheckBox(SR.MS_USERMOOD, Config.getInstance().sndrcvmood);
+            itemsList.addElement(sndrcvmood);
+            updmood = new LinkString(SR.MS_USERMOOD) {
+                public void doAction() {
+                     Config.getInstance().sndrcvmood = true;
+                     new MoodList(midlet.BombusMod.getInstance().getDisplay());
+                }
+            }; 
+            
 //#ifdef PEP_TUNE
-//#             rcvtune = new CheckBox(SR.MS_USERTUNE, Config.getInstance().rcvtune); 
-//#             itemsList.addElement(rcvtune);
+            rcvtune = new CheckBox(SR.MS_USERTUNE, Config.getInstance().rcvtune); 
+            itemsList.addElement(rcvtune);
 //#endif
 //#ifdef PEP_ACTIVITY
-//#             rcvactivity = new CheckBox(SR.MS_USERACTIVITY, Config.getInstance().rcvactivity);
-//#             itemsList.addElement(rcvactivity);
-//#             updact = new LinkString(SR.MS_USERACTIVITY) {
-//#                 public void doAction() {
-//#                      Config.getInstance().rcvactivity = true;
-//#                      new ActivityList(midlet.BombusMod.getInstance().getDisplay());
-//#                 }
-//#             };
+            rcvactivity = new CheckBox(SR.MS_USERACTIVITY, Config.getInstance().rcvactivity);
+            itemsList.addElement(rcvactivity);
+            updact = new LinkString(SR.MS_USERACTIVITY) {
+                public void doAction() {
+                     Config.getInstance().rcvactivity = true;
+                     new ActivityList(midlet.BombusMod.getInstance().getDisplay());
+                }
+            };
 //#endif
 //#ifdef PEP
 //#ifdef PEP_LOCATION
-//#             rcvlocation = new CheckBox("User location", Config.getInstance().rcvloc);
-//#             itemsList.addElement(rcvlocation);
+            rcvlocation = new CheckBox("User location", Config.getInstance().rcvloc);
+            itemsList.addElement(rcvlocation);
 //#endif
-//# 
-//#             itemsList.addElement(new SpacerItem(10));
-//#             itemsList.addElement(new SimpleString("Publish events", true));
-//#             itemsList.addElement(updmood);
+
+            itemsList.addElement(new SpacerItem(10));
+            itemsList.addElement(new SimpleString("Publish events", true));
+            itemsList.addElement(updmood);
 //#ifdef PEP_ACTIVITY
-//#             itemsList.addElement(updact);
+            itemsList.addElement(updact);
 //#endif
 //#ifdef PEP_LOCATION            
-//#             LinkString updloc = new LinkString("Location") {
-//#                 public void doAction() {
-//#                      new LocationForm(midlet.BombusMod.getInstance().getDisplay(), StaticData.getInstance().roster);
-//#                 }
-//#             };
-//#             itemsList.addElement(updloc);            
+            LinkString updloc = new LinkString("Location") {
+                public void doAction() {
+                     new LocationForm(StaticData.getInstance().roster);
+                }
+            };
+            itemsList.addElement(updloc);            
 //#endif
 //#ifdef PLUGINS
 //#         }
@@ -119,21 +119,21 @@
 //#ifdef PLUGINS
 //#         if (StaticData.getInstance().PEP) {
 //#endif
-//#             Config.getInstance().sndrcvmood=sndrcvmood.getValue();
+            Config.getInstance().sndrcvmood=sndrcvmood.getValue();
 //#ifdef PEP_TUNE
-//#             Config.getInstance().rcvtune=rcvtune.getValue();
+            Config.getInstance().rcvtune=rcvtune.getValue();
 //#endif
 //#ifdef PEP_ACTIVITY
-//#             Config.getInstance().rcvactivity=rcvactivity.getValue();
+            Config.getInstance().rcvactivity=rcvactivity.getValue();
 //#endif
 //#ifdef PEP_LOCATION
-//#             Config.getInstance().rcvloc = rcvlocation.getValue();
+            Config.getInstance().rcvloc = rcvlocation.getValue();
 //#endif
-//# 
+
 //#ifdef PLUGINS
 //#         }
 //#endif
-//#         Config.getInstance().saveToStorage();
+        Config.getInstance().saveToStorage();
 //#endif       
         
         midlet.BombusMod.getInstance().setDisplayable(StaticData.getInstance().roster);
Index: src/PEP/PepPublishResult.java
===================================================================
--- src/PEP/PepPublishResult.java	(revision 741)
+++ src/PEP/PepPublishResult.java	(working copy)
@@ -60,10 +60,10 @@
         
         XmppError e=XmppError.findInStanza(data);
 //#ifdef PEP
-//#         new AlertBox(SR.MS_ERROR_, SR.MS_PEP_NOT_SUPPORTED+"("+e.toString()+")", display, StaticData.getInstance().roster) {
-//#             public void yes() { }
-//#             public void no() { }
-//#         };
+        new AlertBox(SR.MS_ERROR_, SR.MS_PEP_NOT_SUPPORTED+"("+e.toString()+")") {
+            public void yes() { }
+            public void no() { }
+        };
 //#endif
         return NO_MORE_BLOCKS;
     }
Index: src/PEP/LocationForm.java
===================================================================
--- src/PEP/LocationForm.java	(revision 741)
+++ src/PEP/LocationForm.java	(working copy)
@@ -9,123 +9,122 @@
 
 package PEP;
 //#ifdef PEP_LOCATION
-//# import Client.StaticData;
-//# import PEP.location.LocationImpl;
-//# import PEP.location.LocationListenerImpl;
-//# import com.alsutton.jabber.JabberDataBlock;
-//# import com.alsutton.jabber.datablocks.Iq;
-//# import javax.microedition.lcdui.Display;
-//# import javax.microedition.lcdui.Displayable;
-//# import javax.microedition.lcdui.TextField;
-//# import locale.SR;
-//# import ui.controls.AlertBox;
-//# import ui.controls.form.DefForm;
-//# import ui.controls.form.LinkString;
-//# import ui.controls.form.SimpleString;
-//# import ui.controls.form.TextInput;
-//# 
-//# /**
-//#  *
-//#  * @author Vitaly
-//#  */
-//# public class LocationForm extends DefForm implements LocationListenerImpl {
+import Client.StaticData;
+import PEP.location.LocationImpl;
+import PEP.location.LocationListenerImpl;
+import com.alsutton.jabber.JabberDataBlock;
+import com.alsutton.jabber.datablocks.Iq;
+import javax.microedition.lcdui.Display;
+import javax.microedition.lcdui.Displayable;
+import javax.microedition.lcdui.TextField;
+import locale.SR;
+import ui.controls.AlertBox;
+import ui.controls.form.DefForm;
+import ui.controls.form.LinkString;
+import ui.controls.form.SimpleString;
+import ui.controls.form.TextInput;
+
+/**
+ *
+ * @author Vitaly
+ */
+public class LocationForm extends DefForm implements LocationListenerImpl {
 //#ifdef PLUGINS
 //#     public static String plugin = "PLUGIN_PEP";
 //#endif
-//# 
-//#     SimpleString loc;
-//#     TextInput location, descr;
-//#     TextInput lat, lon;
-//#     LinkString detect;
-//# 
-//#     /** Creates a new instance of Location
-//#      * @param display
-//#      * @param parent
-//#      */
-//#     public LocationForm(Display display, Displayable parent) {
-//#         super(display, parent, "Publish location");
-//#         location = new TextInput("Location name", null, null, TextField.ANY);
-//#         descr = new TextInput("Location description", null, null, TextField.ANY);
-//#         lat = new TextInput("Latitude", null, null, TextField.DECIMAL);
-//#         lon = new TextInput("Longitude", null, null, TextField.DECIMAL);
-//# 
-//#         detect = new LinkString("Retrieve location") {
-//#             public void doAction() {
-//#                 detectLocation();
-//#             }
-//#         };
-//#         itemsList.addElement(lat);
-//#         itemsList.addElement(lon);
-//#         itemsList.addElement(location);
-//#         itemsList.addElement(descr);
-//#         itemsList.addElement(detect);
-//#         
-//#         show(parentView);
-//#         parentView = parent;
-//#     }
-//# 
-//#     public void detectLocation() {
-//#         new GeoRetriever(this).start();
-//#     }
-//# 
-//#     public void locationUpdated(LocationImpl lctn) {
-//#         if (lctn != null) {
-//#             lat.setValue(lctn.getLatitude());
-//#             lon.setValue(lctn.getLongitude());
-//#         } else {
-//#             new AlertBox(SR.MS_ERROR, "Error retrieving coordinates", display, this) {
-//#                 public void yes() {}
-//#                 public void no() {}
-//#             };
-//#         }
-//#         redraw();
-//#     }
-//#     
-//#     public void cmdOk() {
-//#         String sid="publish-location";
-//#         JabberDataBlock setActivity=new Iq(null, Iq.TYPE_SET, sid);
-//#         JabberDataBlock action=setActivity.addChildNs("pubsub", "http://jabber.org/protocol/pubsub") .addChild("publish", null);
-//#         action.setAttribute("node", "http://jabber.org/protocol/geoloc");
-//#         JabberDataBlock item=action.addChild("item", null);
-//#         JabberDataBlock geoloc=item.addChildNs("geoloc", "http://jabber.org/protocol/geoloc");
-//#         try {
-//#             if (!lat.getValue().equals("")) {
-//#             geoloc.addChild("lat", lat.getValue());
-//#             geoloc.addChild("lon", lon.getValue());
-//#             geoloc.addChild("description", location.getValue());
-//#             geoloc.addChild("text", descr.getValue());
-//#             }
-//#             //todo: refactor theStream call; send notification to JabberBlockListener if stream was terminated
-//#             StaticData.getInstance().roster.theStream.addBlockListener(new PepPublishResult(display, sid));
-//#             StaticData.getInstance().roster.theStream.send(setActivity);
-//#         } catch (Exception e) {e.printStackTrace(); }
-//#         destroyView();
-//#     }
-//#     public String touchLeftCommand() { return SR.MS_PUBLISH; }
-//# }
-//# 
-//# 
-//# class GeoRetriever extends Thread {
-//# 
-//#     private LocationListenerImpl returnto;
-//# 
-//#     public GeoRetriever(LocationListenerImpl returnto) {
-//#         this.returnto = returnto;
-//#     }
-//# 
-//#     public void run() {
-//#         try {
-//#             retrieveLocation();
-//#         } catch (Exception ex) {
-//#             ex.printStackTrace();
-//#             returnto.locationUpdated(null);
-//#         }
-//#     }
-//# 
-//#     public void retrieveLocation() throws Exception {
-//#         LocationImpl lp = LocationImpl.getInstance();
-//#         lp.getCoordinates();
-//#         returnto.locationUpdated(lp);
-//#     }
-//# }
+
+    SimpleString loc;
+    TextInput location, descr;
+    TextInput lat, lon;
+    LinkString detect;
+
+    /** Creates a new instance of Location
+     * @param parent
+     */
+    public LocationForm(Displayable parent) {
+        super("Publish location");
+        location = new TextInput("Location name", null, null, TextField.ANY);
+        descr = new TextInput("Location description", null, null, TextField.ANY);
+        lat = new TextInput("Latitude", null, null, TextField.DECIMAL);
+        lon = new TextInput("Longitude", null, null, TextField.DECIMAL);
+
+        detect = new LinkString("Retrieve location") {
+            public void doAction() {
+                detectLocation();
+            }
+        };
+        itemsList.addElement(lat);
+        itemsList.addElement(lon);
+        itemsList.addElement(location);
+        itemsList.addElement(descr);
+        itemsList.addElement(detect);
+        
+        show(parentView);
+        parentView = parent;
+    }
+
+    public void detectLocation() {
+        new GeoRetriever(this).start();
+    }
+
+    public void locationUpdated(LocationImpl lctn) {
+        if (lctn != null) {
+            lat.setValue(lctn.getLatitude());
+            lon.setValue(lctn.getLongitude());
+        } else {
+            new AlertBox(SR.MS_ERROR, "Error retrieving coordinates") {
+                public void yes() {}
+                public void no() {}
+            };
+        }
+        redraw();
+    }
+    
+    public void cmdOk() {
+        String sid="publish-location";
+        JabberDataBlock setActivity=new Iq(null, Iq.TYPE_SET, sid);
+        JabberDataBlock action=setActivity.addChildNs("pubsub", "http://jabber.org/protocol/pubsub") .addChild("publish", null);
+        action.setAttribute("node", "http://jabber.org/protocol/geoloc");
+        JabberDataBlock item=action.addChild("item", null);
+        JabberDataBlock geoloc=item.addChildNs("geoloc", "http://jabber.org/protocol/geoloc");
+        try {
+            if (!lat.getValue().equals("")) {
+            geoloc.addChild("lat", lat.getValue());
+            geoloc.addChild("lon", lon.getValue());
+            geoloc.addChild("description", location.getValue());
+            geoloc.addChild("text", descr.getValue());
+            }
+            //todo: refactor theStream call; send notification to JabberBlockListener if stream was terminated
+            StaticData.getInstance().roster.theStream.addBlockListener(new PepPublishResult(display, sid));
+            StaticData.getInstance().roster.theStream.send(setActivity);
+        } catch (Exception e) {e.printStackTrace(); }
+        destroyView();
+    }
+    public String touchLeftCommand() { return SR.MS_PUBLISH; }
+}
+
+
+class GeoRetriever extends Thread {
+
+    private LocationListenerImpl returnto;
+
+    public GeoRetriever(LocationListenerImpl returnto) {
+        this.returnto = returnto;
+    }
+
+    public void run() {
+        try {
+            retrieveLocation();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+            returnto.locationUpdated(null);
+        }
+    }
+
+    public void retrieveLocation() throws Exception {
+        LocationImpl lp = LocationImpl.getInstance();
+        lp.getCoordinates();
+        returnto.locationUpdated(lp);
+    }
+}
 //#endif
Index: src/Menu/JuickThingsMenu.java
===================================================================
--- src/Menu/JuickThingsMenu.java	(revision 741)
+++ src/Menu/JuickThingsMenu.java	(working copy)
@@ -27,9 +27,9 @@
 
     public JuickThingsMenu(Vector things, Display display, Displayable pView, Contact contact) {
 //#ifdef JUICK
-//#         super(SR.MS_JUICK_THINGS, null); //MenuIcons.getInstance()
+        super(SR.MS_JUICK_THINGS, null); //MenuIcons.getInstance()
 //#else
-        super("", null);
+//#         super("", null);
 //#endif
         this.things = things;
         this.contact = contact;
@@ -52,7 +52,7 @@
 //#ifdef RUNNING_MESSAGE
 //#                 Client.Roster.me=new MessageEdit(display, parentView, contact, things.elementAt(index)+" ");
 //#else
-        new MessageEdit(display, parentView, contact, things.elementAt(index)+" "); // To chat
+        new MessageEdit(parentView, contact, things.elementAt(index)+" "); // To chat
 //        new MessageEdit(display, this, contact, things.elementAt(index)+" "); // Previons menu
 //#endif
         } catch (Exception e) {/*no messages*/}
Index: src/images/ClientsIconsData.java
===================================================================
--- src/images/ClientsIconsData.java	(revision 741)
+++ src/images/ClientsIconsData.java	(working copy)
@@ -52,8 +52,10 @@
 
                 clients=new StringLoader().stringLoader(restxt, 2);
             } catch (Exception e) {
-                System.out.print("ClientsIcons: Can't load ");
-                System.out.println(restxt);
+//#ifdef DEBUG
+//#                 System.out.print("ClientsIcons: Can't load ");
+//#                 System.out.println(restxt);
+//#endif
             }
             instance=new ClientsIconsData();
         }
@@ -64,7 +66,7 @@
 
     private static int getClientIDByCaps(String caps) {
         if (clients.length==0) return -1;
-        caps=caps.toLowerCase();
+        String lcaps=caps.toLowerCase();
         for (int i=0; i<clients[0].size(); i++) {
             String client=((String) clients[0].elementAt(i)).toLowerCase();
             if (client.indexOf(",")>-1) {
@@ -74,14 +76,14 @@
                     if (pos>-1) {
                         int endpos=client.indexOf(",", pos);
                         String eqStr=(endpos<0)?client.substring(pos):client.substring(pos, endpos);
-                        if (caps.indexOf(eqStr)>-1) return i;
+                        if (lcaps.indexOf(eqStr)>-1) return i;
                         
                         pos=client.indexOf(",", pos+1);
                         if (pos<0) parse=false; else pos=pos+1;
                     } else parse=false;
                 }
             } else {
-                if (caps.indexOf(client)>-1)
+                if (lcaps.indexOf(client)>-1)
                     return i;
             }
 	}
@@ -91,7 +93,7 @@
     public static void processData(Contact c, String data) {
 //#ifdef CLIENTS_ICONS
         c.client=getClientIDByCaps(data);
-        c.clientName=(c.client>-1)?c.clientName=getClientNameByID(c.client):"";
+        c.clientName=(c.client>-1)?getClientNameByID(c.client):"";
 //#endif
     }
     
Index: src/Conference/AppendNick.java
===================================================================
--- src/Conference/AppendNick.java	(revision 741)
+++ src/Conference/AppendNick.java	(working copy)
@@ -55,11 +55,9 @@
     Vector nicknames;
     int caretPos; 
     
-    Command cmdOk=new Command(SR.MS_APPEND, Command.OK, 1);
-    
     private MessageEdit me;
     
-    public AppendNick(Display display, Displayable pView, Contact to, int caretPos, MessageEdit me) {
+    public AppendNick(Displayable pView, Contact to, int caretPos, MessageEdit me) {
         super(SR.MS_SELECT_NICKNAME);
         this.caretPos=caretPos;
         
@@ -72,7 +70,7 @@
                 itemsList.addElement(c);
         }
         show(parentView);
-        this.parentView=pView;
+        parentView = pView;
     }    
         
     public void eventOk(){
Index: src/ui/controls/form/DefForm.java
===================================================================
--- src/ui/controls/form/DefForm.java	(revision 741)
+++ src/ui/controls/form/DefForm.java	(working copy)
@@ -32,7 +32,6 @@
 import Menu.MenuListener;
 import Menu.Command;
 import Menu.MyMenu;
-import javax.microedition.lcdui.Display;
 import javax.microedition.lcdui.Displayable;
 import locale.SR;
 import ui.MainBar;
Index: src/ui/controls/ExTextBox.java
===================================================================
--- src/ui/controls/ExTextBox.java	(revision 741)
+++ src/ui/controls/ExTextBox.java	(working copy)
@@ -34,7 +34,7 @@
 import javax.microedition.lcdui.TextField;
 import locale.SR;
 //#ifdef CLIPBOARD
-//# import util.ClipBoard;
+import util.ClipBoard;
 //#endif
 //#ifdef ARCHIVE
 import Archive.ArchiveList;
@@ -57,7 +57,7 @@
     private Config cf;
     
 //#ifdef CLIPBOARD
-//#     private ClipBoard clipboard;
+    private ClipBoard clipboard;
 //#endif
     
 //#ifdef ARCHIVE
@@ -67,7 +67,7 @@
 //#     protected Command cmdTemplate=new Command(SR.MS_TEMPLATE, Command.SCREEN, 7); 
 //#endif  
 //#ifdef CLIPBOARD
-//#     protected Command cmdPasteText=new Command(SR.MS_PASTE, Command.SCREEN, 8);  
+    protected Command cmdPasteText=new Command(SR.MS_PASTE, Command.SCREEN, 8);  
 //#endif
     
     int maxSize=500;
@@ -95,13 +95,13 @@
             addCommand(cmdPaste);
 //#endif
 //#ifdef CLIPBOARD
-//#         if (cf.useClipBoard) {
-//#             clipboard=ClipBoard.getInstance();
-//#             if (!clipboard.isEmpty()) {
-//#                 addCommand(cmdPasteText);
-//#                 if (Config.getInstance().phoneManufacturer == Config.SONYE) System.gc(); // prevent flickering on Sony Ericcsson C510
-//#             }
-//#         }
+        if (cf.useClipBoard) {
+            clipboard=ClipBoard.getInstance();
+            if (!clipboard.isEmpty()) {
+                addCommand(cmdPasteText);
+                if (Config.getInstance().phoneManufacturer == Config.SONYE) System.gc(); // prevent flickering on Sony Ericcsson C510
+            }
+        }
 //#endif
 //#if TEMPLATES
 //#ifdef PLUGINS
@@ -142,10 +142,10 @@
         if (body.length()==0) body=null;
 
 //#ifdef ARCHIVE
-	if (c==cmdPaste) { new ArchiveList(display, this, caretPos, 1, this); return true; }
+	if (c==cmdPaste) { new ArchiveList(caretPos, 1, this); return true; }
 //#endif
 //#ifdef CLIPBOARD
-//#         if (c==cmdPasteText) { insert(clipboard.getClipBoard(), getCaretPos()); return true; }
+        if (c==cmdPasteText) { insert(clipboard.getClipBoard(), getCaretPos()); return true; }
 //#endif
 //#if TEMPLATES
 //#         if (c==cmdTemplate) { new ArchiveList(display, this, caretPos, 2, this); return true; }
Index: src/Client/Roster.java
===================================================================
--- src/Client/Roster.java	(revision 741)
+++ src/Client/Roster.java	(working copy)
@@ -50,7 +50,7 @@
 import Menu.RosterToolsMenu;
 import Menu.SieNatMenu;
 //#ifdef CLIENTS_ICONS
-//# import images.ClientsIconsData;
+import images.ClientsIconsData;
 //#endif
 import images.RosterIcons;
 
@@ -108,7 +108,7 @@
 //#endif
 
 //#ifdef PEP
-//# import xmpp.extensions.PepListener;
+import xmpp.extensions.PepListener;
 //#endif
 
 public class Roster
@@ -185,8 +185,8 @@
 //#endif
 
 //#ifdef JUICK
-//#     public Vector juickContacts = new Vector();
-//#     public int indexMainJuickContact = -1; // Т.е. считаем, что жуйкоконтактов нет вообще.
+    public Vector juickContacts = new Vector();
+    public int indexMainJuickContact = -1; // Т.е. считаем, что жуйкоконтактов нет вообще.
 //#endif
     public long lastMessageTime=Time.utcTimeMillis();
 
@@ -250,7 +250,7 @@
 //#ifdef PLUGINS
 //# 	if (sd.ClientsIcons)
 //#endif
-//#         ClientsIconsData.getInstance();
+        ClientsIconsData.getInstance();
 //#endif
     }
     
@@ -361,7 +361,7 @@
     // establishing connection process
     public void run(){
 //#ifdef POPUPS
-//#         //if (cf.firstRun) setWobbler(1, (Contact) null, SR.MS_ENTER_SETTINGS);
+        //if (cf.firstRun) setWobbler(1, (Contact) null, SR.MS_ENTER_SETTINGS);
 //#endif
         setQuerySign(true);
 	if (!doReconnect) {
@@ -403,9 +403,9 @@
 	    hContacts=new Vector();
 
 //#ifdef JUICK
-//#             juickContacts = null;
-//#             juickContacts = new Vector();
-//#             indexMainJuickContact = -1;
+            juickContacts = null;
+            juickContacts = new Vector();
+            indexMainJuickContact = -1;
 //#endif
 
             groups=null;
@@ -635,7 +635,7 @@
             c=new Contact(nick, jid, Presence.PRESENCE_OFFLINE, null);
             addContact(c);
 //#ifdef JUICK
-//#             addJuickContact(c);
+            addJuickContact(c);
 //#endif
         }
         
@@ -655,7 +655,7 @@
                     if (status<0) {
                         hContacts.removeElementAt(index);
 //#ifdef JUICK
-//#                         deleteJuickContact(c);
+                        deleteJuickContact(c);
 //#endif
                         continue;
                     }
@@ -853,9 +853,9 @@
     }
 
 //#ifdef POPUPS
-//#     public void showContactMessageList(String jid) {
-//#         new ContactMessageList(sd.roster.getContact(jid, false), display);
-//#     }
+    public void showContactMessageList(String jid) {
+        new ContactMessageList(sd.roster.getContact(jid, false));
+    }
 //#endif
 
     public void addContact(Contact c) {
@@ -873,90 +873,90 @@
     }
 
 //#ifdef JUICK
-//# /*        public Vector getJuickContacts(boolean str) {
-//#         Vector juickContacts = new Vector();
-//#         synchronized (hContacts) {
-//#             for (Enumeration e = hContacts.elements(); e.hasMoreElements();) {
-//#                 Contact c = (Contact) e.nextElement();
-//#                 if (isJuickContact(c))
-//#                     if (str)
-//#                         juickContacts.addElement(c.bareJid);
-//#                     else juickContacts.addElement(c);
-//#             }
-//#         }
-//#         return juickContacts;
-//#     }*/
-//# 
-//#     public Contact getMainJuickContact() {
-//#         if (indexMainJuickContact > -1)
-//#             return (Contact) juickContacts.elementAt(indexMainJuickContact);
-//#         else return null;
-//#     }
-//# 
-//# /*    public void updateMainJuickContact() {
-//#         System.out.println("1. juickJID: "+cf.juickJID);
-//#         mainJuickContact = null;
-//#         int index = -1;
-//#         if (!cf.juickJID.equals("")) {
-//#             index = hContacts.indexOf(new Contact("Juick", cf.juickJID, Presence.PRESENCE_OFFLINE, null));
-//#             System.out.println("index: "+index);
-//#             if (index < 0) { // Если не нашли, то считаем, что не указан.
-//#                cf.juickJID = "";
-//#             }
-//#         }
-//#         if (index > -1) {
-//#             mainJuickContact = (Contact) hContacts.elementAt(index);
-//#         } else {
-//#             Vector juickContacts = getJuickContacts(false);
-//#             if (juickContacts.size() > 0) {
-//#                 mainJuickContact = (Contact) juickContacts.elementAt(0);
-//#             }
-//#         }
-//#         System.out.println("2. juickJID: "+cf.juickJID);
-//#     }*/
-//# 
-//#     public boolean isJuickContact(Contact c) {
-//#         return (c.bareJid.equals("juick@juick.com")
-//#          || c.bareJid.startsWith("juick%juick.com@"));
-//#     }
-//# 
-//#     public void addJuickContact(Contact c) {
-//#         if (isJuickContact(c)) {
-//#             juickContacts.addElement(c);
-//#             // Далее урезаный аналог updateMainJuickContact(). Побыстрее него, работает *только* при добавлении контакта.
-//#             if (isMainJuickContact(c)) {
-//#                 indexMainJuickContact = juickContacts.size() - 1;
-//#             } else if (indexMainJuickContact < 0) {
-//#                 indexMainJuickContact = 0;
-//#             }
-//#         }
-//#     }
-//# 
-//#     public void deleteJuickContact(Contact c) {
-//#         if (juickContacts.removeElement(c)) {
-//#             updateMainJuickContact();
-//#         }
-//#     }
-//# 
-//#     public boolean isMainJuickContact(Contact c) {
-//#         return c.bareJid.equals((new JuickConfig(display, parentView)).getJuickJID());
-//#     }
-//# 
-//#     public void updateMainJuickContact() {
-//#         JuickConfig juickConfig = new JuickConfig(display, parentView);
-//#         int size = juickContacts.size();
-//#         if (size < 1) {
-//#             indexMainJuickContact = -1;
-//#         } else if ((size == 1) || (juickConfig.getJuickJID().equals(""))) {
-//#             indexMainJuickContact = 0;
-//#         } else {
-//#             indexMainJuickContact = juickContacts.indexOf(new Contact("Juick", juickConfig.getJuickJID(), Presence.PRESENCE_OFFLINE, null));
-//#             if (indexMainJuickContact < 0) {
-//#                 juickConfig.setJuickJID("", false);
-//#                 indexMainJuickContact = 0; // Можно сделать это присваивание через рекурсию, но вроде пока не надо.
-//#             }
-//#         }
-//#     }
+/*        public Vector getJuickContacts(boolean str) {
+        Vector juickContacts = new Vector();
+        synchronized (hContacts) {
+            for (Enumeration e = hContacts.elements(); e.hasMoreElements();) {
+                Contact c = (Contact) e.nextElement();
+                if (isJuickContact(c))
+                    if (str)
+                        juickContacts.addElement(c.bareJid);
+                    else juickContacts.addElement(c);
+            }
+        }
+        return juickContacts;
+    }*/
+
+    public Contact getMainJuickContact() {
+        if (indexMainJuickContact > -1)
+            return (Contact) juickContacts.elementAt(indexMainJuickContact);
+        else return null;
+    }
+
+/*    public void updateMainJuickContact() {
+        System.out.println("1. juickJID: "+cf.juickJID);
+        mainJuickContact = null;
+        int index = -1;
+        if (!cf.juickJID.equals("")) {
+            index = hContacts.indexOf(new Contact("Juick", cf.juickJID, Presence.PRESENCE_OFFLINE, null));
+            System.out.println("index: "+index);
+            if (index < 0) { // Если не нашли, то считаем, что не указан.
+               cf.juickJID = "";
+            }
+        }
+        if (index > -1) {
+            mainJuickContact = (Contact) hContacts.elementAt(index);
+        } else {
+            Vector juickContacts = getJuickContacts(false);
+            if (juickContacts.size() > 0) {
+                mainJuickContact = (Contact) juickContacts.elementAt(0);
+            }
+        }
+        System.out.println("2. juickJID: "+cf.juickJID);
+    }*/
+
+    public boolean isJuickContact(Contact c) {
+        return (c.bareJid.equals("juick@juick.com")
+         || c.bareJid.startsWith("juick%juick.com@"));
+    }
+
+    public void addJuickContact(Contact c) {
+        if (isJuickContact(c)) {
+            juickContacts.addElement(c);
+            // Далее урезаный аналог updateMainJuickContact(). Побыстрее него, работает *только* при добавлении контакта.
+            if (isMainJuickContact(c)) {
+                indexMainJuickContact = juickContacts.size() - 1;
+            } else if (indexMainJuickContact < 0) {
+                indexMainJuickContact = 0;
+            }
+        }
+    }
+
+    public void deleteJuickContact(Contact c) {
+        if (juickContacts.removeElement(c)) {
+            updateMainJuickContact();
+        }
+    }
+
+    public boolean isMainJuickContact(Contact c) {
+        return c.bareJid.equals((new JuickConfig(display, parentView)).getJuickJID());
+    }
+
+    public void updateMainJuickContact() {
+        JuickConfig juickConfig = new JuickConfig(display, parentView);
+        int size = juickContacts.size();
+        if (size < 1) {
+            indexMainJuickContact = -1;
+        } else if ((size == 1) || (juickConfig.getJuickJID().equals(""))) {
+            indexMainJuickContact = 0;
+        } else {
+            indexMainJuickContact = juickContacts.indexOf(new Contact("Juick", juickConfig.getJuickJID(), Presence.PRESENCE_OFFLINE, null));
+            if (indexMainJuickContact < 0) {
+                juickConfig.setJuickJID("", false);
+                indexMainJuickContact = 0; // Можно сделать это присваивание через рекурсию, но вроде пока не надо.
+            }
+        }
+    }
 //#endif
 
     public void sendPresence(int newStatus, String message) {
@@ -1297,11 +1297,11 @@
 //#endif
 
 //#ifdef PEP
-//#         if (cf.sndrcvmood)
+        if (cf.sndrcvmood)
 //#ifdef PLUGINS
 //#             if (sd.PEP)
 //#endif
-//#                 PepListener.getInstance().addBlockListener();
+                PepListener.getInstance().addBlockListener();
 //#endif
 //#if SASL_XGOOGLETOKEN
 //#         if (StaticData.getInstance().account.isGmail())
@@ -1674,15 +1674,15 @@
 //#ifdef PLUGINS
 //#                     if (sd.ClientsIcons)
 //#endif
-//#                         if (cf.showClientIcon) {
-//#                             if (pr.hasEntityCaps()) {
-//#                                 if (pr.getEntityNode()!=null)
-//#                                     getClientIcon(c, pr.getEntityNode());
-//#                                 if (pr.getEntityVer()!=null)
-//#                                     c.version=pr.getEntityVer();
-//#                             }
-//#                         }
-//# 
+                        if (cf.showClientIcon) {
+                            if (pr.hasEntityCaps()) {
+                                if (pr.getEntityNode()!=null)
+                                    getClientIcon(c, pr.getEntityNode());
+                                if (pr.getEntityVer()!=null)
+                                    c.version=pr.getEntityVer();
+                            }
+                        }
+
 //#endif
                         String lang=pr.getAttribute("xml:lang");
 
@@ -1752,16 +1752,16 @@
 //#ifdef PLUGINS
 //#                         if (sd.ClientsIcons)
 //#endif
-//#                             if (cf.showClientIcon) if (ti<Presence.PRESENCE_OFFLINE)
-//#                                 if (pr.hasEntityCaps()) {
-//#                                     if (pr.getEntityNode()!=null) {
-//#                                         ClientsIconsData.processData(c, pr.getEntityNode());
-//#                                         if (pr.getEntityVer()!=null)
-//#                                             c.version=pr.getEntityVer();
-//#                                     }
-//#                                 } else if (c.jid.hasResource()) {
-//#                                     ClientsIconsData.processData(c, c.getResource().substring(1));
-//#                                 }
+                            if (cf.showClientIcon) if (ti<Presence.PRESENCE_OFFLINE)
+                                if (pr.hasEntityCaps()) {
+                                    if (pr.getEntityNode()!=null) {
+                                        ClientsIconsData.processData(c, pr.getEntityNode());
+                                        if (pr.getEntityVer()!=null)
+                                            c.version=pr.getEntityVer();
+                                    }
+                                } else if (c.jid.hasResource()) {
+                                    ClientsIconsData.processData(c, c.getResource().substring(1));
+                                }
 //#endif
                             JabberDataBlock j2j=pr.findNamespace("x", "j2j:history");
                             if (j2j!=null) {
@@ -1840,9 +1840,9 @@
         return JabberBlockListener.BLOCK_REJECTED;
     }
 //#ifdef CLIENTS_ICONS
-//#     private void getClientIcon(Contact c, String data) {
-//#         ClientsIconsData.processData(c, data);
-//#     }
+    private void getClientIcon(Contact c, String data) {
+        ClientsIconsData.processData(c, data);
+    }
 //#endif
 
     boolean  processRoster(JabberDataBlock data){
@@ -1881,13 +1881,13 @@
     }
 
 //#ifdef POPUPS
-//#     boolean showWobbler(Contact c) {
-//#         if (!cf.popUps)
-//#             return false;
-//#         if (activeContact==null)
-//#             return true;
-//#         return(!c.equals(activeContact));
-//#         }
+    boolean showWobbler(Contact c) {
+        if (!cf.popUps)
+            return false;
+        if (activeContact==null)
+            return true;
+        return(!c.equals(activeContact));
+        }
 //#endif
     
 //#ifdef FILE_TRANSFER
@@ -1922,9 +1922,9 @@
             return;    // no signalling/focus on ignore
         
 //#ifdef POPUPS
-//#         if (cf.popUps)
-//#             if (message.messageType==Msg.MESSAGE_TYPE_AUTH && showWobbler(c))
-//#                 setWobbler(2, c, message.from+"\n"+message.body);
+        if (cf.popUps)
+            if (message.messageType==Msg.MESSAGE_TYPE_AUTH && showWobbler(c))
+                setWobbler(2, c, message.from+"\n"+message.body);
 //#endif
 
 	if (cf.popupFromMinimized)
@@ -1936,8 +1936,8 @@
         if (message.highlite) {
             playNotify(SOUND_FOR_ME);
 //#ifdef POPUPS
-//#             if (showWobbler(c))
-//#                 setWobbler(2, c, message.body);
+            if (showWobbler(c))
+                setWobbler(2, c, message.body);
 //#endif
             autorespond = true;
         } else if (message.messageType==Msg.MESSAGE_TYPE_IN || message.messageType==Msg.MESSAGE_TYPE_HEADLINE) {
@@ -1946,10 +1946,10 @@
                 if (!(c instanceof MucContact))
 //#endif
 //#ifdef POPUPS
-//#                     if (showWobbler(c)) {
-//#                         setWobbler(2, c, c.toString()+": "+message.body);
-//#                         autorespond = true;
-//#                     }
+                    if (showWobbler(c)) {
+                        setWobbler(2, c, c.toString()+": "+message.body);
+                        autorespond = true;
+                    }
 //#endif
                 if (c.group.type==Groups.TYPE_VIP) {
                     playNotify(SOUND_FOR_VIP);
@@ -2186,7 +2186,7 @@
         super.eventLongOk();
 //#ifndef WMUC
 //#ifdef POPUPS
-//#         showInfo();
+        showInfo();
 //#endif
 //#endif
     }
@@ -2207,7 +2207,7 @@
 //#ifdef RUNNING_MESSAGE
 //#             me = new MessageEdit(display, pview, c, c.msgSuspended);
 //#else
-            new MessageEdit(display, pview, c, c.msgSuspended);
+            new MessageEdit(pview, c, c.msgSuspended);
 //#endif
             c.msgSuspended=null;
         }
@@ -2250,11 +2250,11 @@
         
         switch (keyCode) {
 //#ifdef POPUPS
-//#             case KEY_POUND:            
-//#                 if (getItemCount()==0)
-//#                     return;
-//#                 showInfo();
-//#                 return;
+            case KEY_POUND:            
+                if (getItemCount()==0)
+                    return;
+                showInfo();
+                return;
 //#endif
             case KEY_NUM1:            
                 if (cf.collapsedGroups) { //collapse all groups
@@ -2450,133 +2450,133 @@
 //#endif
 
 //#ifdef POPUPS
-//#     public void showInfo() {
-//#         if (getFocusedObject()==null)
-//#             return;
-//# 
-//#         try {
-//#             PopUp.getInstance().next();
-//#             if (getFocusedObject() instanceof Group
+    public void showInfo() {
+        if (getFocusedObject()==null)
+            return;
+
+        try {
+            PopUp.getInstance().next();
+            if (getFocusedObject() instanceof Group
 //#ifndef WMUC
-//#                     || getFocusedObject() instanceof ConferenceGroup
+                    || getFocusedObject() instanceof ConferenceGroup
 //#endif
-//#                     )
-//#                 return;
-//#             setWobbler(1, (Contact) null, null);
-//#         } catch (Exception e) { }
-//#     }
-//# 
-//#     public void setWobbler(int type, Contact contact, String info) {
-//#         if (info==null) {
-//#             StringBuffer mess=new StringBuffer();
-//#             boolean isContact=(getFocusedObject() instanceof Contact);
-//#             Contact cntact=(Contact)getFocusedObject();
+                    )
+                return;
+            setWobbler(1, (Contact) null, null);
+        } catch (Exception e) { }
+    }
+
+    public void setWobbler(int type, Contact contact, String info) {
+        if (info==null) {
+            StringBuffer mess=new StringBuffer();
+            boolean isContact=(getFocusedObject() instanceof Contact);
+            Contact cntact=(Contact)getFocusedObject();
 //#ifndef WMUC
-//#             boolean isMucContact=(getFocusedObject() instanceof MucContact);
-//#             if (isMucContact) {
-//#                 MucContact mucContact=(MucContact)getFocusedObject();
-//# 
-//#                 if (mucContact.origin!=Contact.ORIGIN_GROUPCHAT){
-//#                     mess.append((mucContact.realJid==null)?"":"jid: "+mucContact.realJid+"\n");
-//# 
-//#                     if (mucContact.affiliationCode>MucContact.AFFILIATION_NONE)
-//#                         mess.append(MucContact.getAffiliationLocale(mucContact.affiliationCode));
-//# 
-//#                     if (!(mucContact.roleCode==MucContact.ROLE_PARTICIPANT && mucContact.affiliationCode==MucContact.AFFILIATION_MEMBER)) {
-//#                         if (mucContact.affiliationCode>MucContact.AFFILIATION_NONE)
-//#                             mess.append(SR.MS_AND);
-//#                         mess.append(MucContact.getRoleLocale(mucContact.roleCode));
-//#                     }
-//#                 }
-//#             } else {
+            boolean isMucContact=(getFocusedObject() instanceof MucContact);
+            if (isMucContact) {
+                MucContact mucContact=(MucContact)getFocusedObject();
+
+                if (mucContact.origin!=Contact.ORIGIN_GROUPCHAT){
+                    mess.append((mucContact.realJid==null)?"":"jid: "+mucContact.realJid+"\n");
+
+                    if (mucContact.affiliationCode>MucContact.AFFILIATION_NONE)
+                        mess.append(MucContact.getAffiliationLocale(mucContact.affiliationCode));
+
+                    if (!(mucContact.roleCode==MucContact.ROLE_PARTICIPANT && mucContact.affiliationCode==MucContact.AFFILIATION_MEMBER)) {
+                        if (mucContact.affiliationCode>MucContact.AFFILIATION_NONE)
+                            mess.append(SR.MS_AND);
+                        mess.append(MucContact.getRoleLocale(mucContact.roleCode));
+                    }
+                }
+            } else {
 //#endif
-//#                 mess.append("jid: ")
-//#                     .append(cntact.bareJid)
-//#                     .append(cntact.jid.getResource())
-//#                     .append("\n")
-//#                     .append(SR.MS_SUBSCRIPTION)
-//#                     .append(": ")
-//#                     .append(cntact.subscr);
+                mess.append("jid: ")
+                    .append(cntact.bareJid)
+                    .append(cntact.jid.getResource())
+                    .append("\n")
+                    .append(SR.MS_SUBSCRIPTION)
+                    .append(": ")
+                    .append(cntact.subscr);
 //#ifdef PEP
-//#                 if (cntact.hasMood()) {
-//#                     mess.append("\n")
-//#                         .append(SR.MS_USERMOOD)
-//#                         .append(": ")
-//#                         .append(cntact.getMoodString());
-//#                 }
+                if (cntact.hasMood()) {
+                    mess.append("\n")
+                        .append(SR.MS_USERMOOD)
+                        .append(": ")
+                        .append(cntact.getMoodString());
+                }
 //#ifdef PEP_ACTIVITY
-//#                 if (cntact.hasActivity()) {
-//#                     mess.append("\n").append(SR.MS_USERACTIVITY).append(": ").append(cntact.activity);
-//#                 }
+                if (cntact.hasActivity()) {
+                    mess.append("\n").append(SR.MS_USERACTIVITY).append(": ").append(cntact.activity);
+                }
 //#endif
 //#ifdef PEP_LOCATION
-//#                 if (cntact.hasLocation()) {
-//#                     mess.append("\n").append(SR.MS_USERLOCATION).append(": ").append(cntact.location);
-//#                 }
+                if (cntact.hasLocation()) {
+                    mess.append("\n").append(SR.MS_USERLOCATION).append(": ").append(cntact.location);
+                }
 //#endif
-//# 
+
 //#ifdef PEP_TUNE
-//#                 if (cntact.pepTune) {
-//#                     mess.append("\n").append(SR.MS_USERTUNE);
-//#                     if (cntact.pepTuneText!="") {
-//#                         mess.append(": ").append(cntact.pepTuneText);
-//#                     }
-//#                 }
+                if (cntact.pepTune) {
+                    mess.append("\n").append(SR.MS_USERTUNE);
+                    if (cntact.pepTuneText!="") {
+                        mess.append(": ").append(cntact.pepTuneText);
+                    }
+                }
 //#endif
 //#endif
 //#ifndef WMUC
-//#             }
+            }
 //#endif
-//#             if (cntact.origin!=Contact.ORIGIN_GROUPCHAT){
-//#                 mess.append((cntact.j2j!=null)?"\nJ2J: "+cntact.j2j:"");
+            if (cntact.origin!=Contact.ORIGIN_GROUPCHAT){
+                mess.append((cntact.j2j!=null)?"\nJ2J: "+cntact.j2j:"");
 //#ifdef CLIENTS_ICONS
 //#ifdef PLUGINS
 //#                 if (cf.showClientIcon)
 //#endif
-//#                     if (cntact.client>-1) {
-//#                         mess.append("\n")
-//#                             .append(SR.MS_USE)
-//#                             .append(": ")
-//#                             .append(cntact.clientName);
-//#                     }
+                    if (cntact.client>-1) {
+                        mess.append("\n")
+                            .append(SR.MS_USE)
+                            .append(": ")
+                            .append(cntact.clientName);
+                    }
 //#endif
-//#                 if (cntact.version!=null) {
-//#                     mess.append("\n")
-//#                         .append(SR.MS_VERSION)
-//#                         .append(": ")
-//#                         .append(cntact.version);
-//#                 }
-//#                 if (cntact.lang!=null) {
-//#                     mess.append("\n")
-//#                         .append(SR.MS_LANGUAGE)
-//#                         .append(": ")
-//#                         .append(cntact.lang);
-//#                 }
-//#             }
-//# 
-//#             if (cntact.statusString!=null) {
-//#                 if (cntact.origin!=Contact.ORIGIN_GROUPCHAT){
-//#                     mess.append("\n")
-//#                         .append(SR.MS_STATUS)
-//#                         .append(": ");
-//#                 }
-//#                 mess.append(cntact.statusString);
-//# 
-//#             if (cntact.priority!=0) {
-//#                     mess.append(" [")
-//#                         .append(cntact.priority)
-//#                         .append("]");
-//#                 }
-//#             }
-//# 
-//#             setWobble(1, null, mess.toString());
-//#             mess=null;
-//#         } else {
-//#             setWobble(type, contact.getJid(), info);
-//#         }
-//# 
-//#         redraw();
-//#     }
+                if (cntact.version!=null) {
+                    mess.append("\n")
+                        .append(SR.MS_VERSION)
+                        .append(": ")
+                        .append(cntact.version);
+                }
+                if (cntact.lang!=null) {
+                    mess.append("\n")
+                        .append(SR.MS_LANGUAGE)
+                        .append(": ")
+                        .append(cntact.lang);
+                }
+            }
+
+            if (cntact.statusString!=null) {
+                if (cntact.origin!=Contact.ORIGIN_GROUPCHAT){
+                    mess.append("\n")
+                        .append(SR.MS_STATUS)
+                        .append(": ");
+                }
+                mess.append(cntact.statusString);
+
+            if (cntact.priority!=0) {
+                    mess.append(" [")
+                        .append(cntact.priority)
+                        .append("]");
+                }
+            }
+
+            setWobble(1, null, mess.toString());
+            mess=null;
+        } else {
+            setWobble(type, contact.getJid(), info);
+        }
+
+        redraw();
+    }
 //#endif
     
     public void logoff(String mess){
@@ -2647,12 +2647,12 @@
     public void cmdStatus() { currentReconnect=0; new StatusSelect(display, this, null); }
     public void cmdAlert() { new AlertProfile(display, this); }
 //#ifdef ARCHIVE
-    public void cmdArchive() { new ArchiveList(display, this, -1, 1, null); }
+    public void cmdArchive() { new ArchiveList( -1, 1, null); }
 //#endif
     public void cmdInfo() { new Info.InfoWindow(display, this); }
     public void cmdTools() { new RosterToolsMenu(display, this); }
 //#ifdef POPUPS
-//#     public void cmdClearPopups() { PopUp.getInstance().clear(); }
+    public void cmdClearPopups() { PopUp.getInstance().clear(); }
 //#endif
 //#ifndef WMUC
    public void cmdConference() { if (isLoggedIn()) new Bookmarks(display, this, null); }
Index: src/Client/MessageEdit.java
===================================================================
--- src/Client/MessageEdit.java	(revision 741)
+++ src/Client/MessageEdit.java	(working copy)
@@ -35,7 +35,7 @@
 import javax.microedition.lcdui.*;
 import locale.SR;
 //#ifdef CLIPBOARD
-//# import util.ClipBoard;
+import util.ClipBoard;
 //#endif
 //#ifdef ARCHIVE
 import Archive.ArchiveList;
@@ -74,7 +74,7 @@
 //#     private boolean sendInDeTranslit=false;
 //#endif
 //#ifdef CLIPBOARD
-//#     private ClipBoard clipboard;
+    private ClipBoard clipboard;
 //#endif
 
 //#ifdef ARCHIVE
@@ -84,7 +84,7 @@
 //#     private Command cmdTemplate=new Command(SR.MS_TEMPLATE, Command.ITEM, 7);
 //#endif
 //#ifdef CLIPBOARD
-//#     private Command cmdPasteText=new Command(SR.MS_PASTE, Command.ITEM, 8);
+    private Command cmdPasteText=new Command(SR.MS_PASTE, Command.ITEM, 8);
 //#endif
     
     private Command cmdSend;//=new Command(SR.MS_SEND, Command.OK, 1);
@@ -109,7 +109,7 @@
 //#     Ticker ticker = new Ticker("");
 //#endif
     /** Creates a new instance of MessageEdit */
-    public MessageEdit(Display display, Displayable pView, Contact to, String body) {
+    public MessageEdit( Displayable pView, Contact to, String body) {
         t = new TextBox(to.toString(), "", 500, TextField.ANY);
         try {
             //expanding buffer as much as possible
@@ -141,12 +141,12 @@
             t.addCommand(cmdPaste);
 //#endif
 //#ifdef CLIPBOARD
-//#         if (cf.useClipBoard) {
-//#             clipboard=ClipBoard.getInstance();
-//#             if (!clipboard.isEmpty()) {
-//#                 t.addCommand(cmdPasteText);
-//#             }
-//#         }
+        if (cf.useClipBoard) {
+            clipboard=ClipBoard.getInstance();
+            if (!clipboard.isEmpty()) {
+                t.addCommand(cmdPasteText);
+            }
+        }
 //#endif
 //#if TEMPLATES
 //#ifdef PLUGINS
@@ -210,10 +210,10 @@
         if (body.length()==0) body=null;
 
 //#ifdef ARCHIVE
-	if (c==cmdPaste) { new ArchiveList(display, t, caretPos, 1, t); return; }
+	if (c==cmdPaste) { new ArchiveList(caretPos, 1, t); return; }
 //#endif
 //#ifdef CLIPBOARD
-//#         if (c==cmdPasteText) { insert(clipboard.getClipBoard(), getCaretPos()); return; }
+        if (c==cmdPasteText) { insert(clipboard.getClipBoard(), getCaretPos()); return; }
 //#endif
 //#if TEMPLATES
 //#         if (c==cmdTemplate) { new ArchiveList(display, t, caretPos, 2, t); return; }
@@ -226,7 +226,7 @@
         if (c==cmdSmile) { new SmilePicker(t, caretPos, this); return; }
 //#endif
 //#ifndef WMUC
-        if (c==cmdInsNick) { new AppendNick(display, t, to, caretPos, this); return; }
+        if (c==cmdInsNick) { new AppendNick(t, to, caretPos, this); return; }
 //#endif
         if (c==cmdCancel) {
             composing=false;
Index: src/Client/ContactMessageList.java
===================================================================
--- src/Client/ContactMessageList.java	(revision 741)
+++ src/Client/ContactMessageList.java	(working copy)
@@ -30,33 +30,30 @@
 import Conference.MucContact;
 //#endif
 //#ifdef HISTORY
-//# import History.HistoryAppend;
+import History.HistoryAppend;
 //#ifdef LAST_MESSAGES
 //# import History.HistoryStorage;
 //#endif
 //#ifdef HISTORY_READER
-//# import History.HistoryReader;
+import History.HistoryReader;
 //#endif
 //#endif
 import Menu.RosterItemActions;
 import Messages.MessageList;
-import images.RosterIcons;
-import javax.microedition.lcdui.Display;
 import javax.microedition.lcdui.Displayable;
 import locale.SR;
 import ui.MainBar;
 import java.util.*;
-import ui.reconnectWindow;
 import Menu.Command;
 //#ifdef CLIPBOARD
-//# import util.ClipBoard;
+import util.ClipBoard;
 //#endif
 //#ifdef ARCHIVE
 import Archive.MessageArchive;
 //#endif
 //#ifdef JUICK
-//# import Menu.JuickThingsMenu;
-//# import Menu.MyMenu;
+import Menu.JuickThingsMenu;
+import Menu.MyMenu;
 //#endif
 
 public class ContactMessageList extends MessageList {
@@ -83,35 +80,35 @@
 //#endif
 //#ifdef HISTORY
 //#ifdef HISTORY_READER
-//#          Command cmdReadHistory=new Command(SR.MS_HISTORY, Command.SCREEN, 13);
+         Command cmdReadHistory=new Command(SR.MS_HISTORY, Command.SCREEN, 13);
 //#endif
-//# //        if (cf.lastMessages && !contact.isHistoryLoaded()) loadRecentList();
+//        if (cf.lastMessages && !contact.isHistoryLoaded()) loadRecentList();
 //#endif
 //#ifdef CLIPBOARD    
-//#     Command cmdSendBuffer=new Command(SR.MS_SEND_BUFFER, Command.SCREEN, 14);
+    Command cmdSendBuffer=new Command(SR.MS_SEND_BUFFER, Command.SCREEN, 14);
 //#endif
 
     StaticData sd = StaticData.getInstance();
 
 //#ifdef JUICK
-//#     Command cmdJuickMessageReply=new Command(SR.MS_JUICK_MESSAGE_REPLY, Command.SCREEN, 1);
-//#     Command cmdJuickSendPrivateReply;
-//#     Command cmdJuickThings=new Command(SR.MS_JUICK_THINGS, Command.SCREEN, 3);
-//#     Command cmdJuickMessageDelete=new Command(SR.MS_JUICK_MESSAGE_DELETE, Command.SCREEN, 4);
-//#     Command cmdJuickPostSubscribe=new Command(SR.MS_JUICK_POST_SUBSCRIBE, Command.SCREEN, 5);
-//#     Command cmdJuickPostUnsubscribe=new Command(SR.MS_JUICK_POST_UNSUBSCRIBE, Command.SCREEN, 6);
-//#     Command cmdJuickPostRecommend=new Command(SR.MS_JUICK_POST_RECOMMEND, Command.SCREEN, 7);
-//#     Command cmdJuickPostShow=new Command(SR.MS_JUICK_POST_SHOW, Command.SCREEN, 8);
-//# 
-//#     public Command cmdJuickCommands=new Command(SR.MS_COMMANDS+" Juick", Command.SCREEN, 15);
-//#     Vector currentJuickCommands = new Vector();
-//# 
-//#     public ContactMessageList() {
-//#     }
+    Command cmdJuickMessageReply=new Command(SR.MS_JUICK_MESSAGE_REPLY, Command.SCREEN, 1);
+    Command cmdJuickSendPrivateReply;
+    Command cmdJuickThings=new Command(SR.MS_JUICK_THINGS, Command.SCREEN, 3);
+    Command cmdJuickMessageDelete=new Command(SR.MS_JUICK_MESSAGE_DELETE, Command.SCREEN, 4);
+    Command cmdJuickPostSubscribe=new Command(SR.MS_JUICK_POST_SUBSCRIBE, Command.SCREEN, 5);
+    Command cmdJuickPostUnsubscribe=new Command(SR.MS_JUICK_POST_UNSUBSCRIBE, Command.SCREEN, 6);
+    Command cmdJuickPostRecommend=new Command(SR.MS_JUICK_POST_RECOMMEND, Command.SCREEN, 7);
+    Command cmdJuickPostShow=new Command(SR.MS_JUICK_POST_SHOW, Command.SCREEN, 8);
+
+    public Command cmdJuickCommands=new Command(SR.MS_COMMANDS+" Juick", Command.SCREEN, 15);
+    Vector currentJuickCommands = new Vector();
+
+    public ContactMessageList() {
+    }
 //#endif
 
 //#ifdef CLIPBOARD    
-//#     private ClipBoard clipboard=ClipBoard.getInstance();
+    private ClipBoard clipboard=ClipBoard.getInstance();
 //#endif
     
     private Config cf;
@@ -198,10 +195,10 @@
             if (!startSelection) addCommand(cmdSelect);
         
 //#ifdef CLIPBOARD
-//#             if (cf.useClipBoard) {
-//#                 addCommand(cmdCopy);
-//#                 if (!clipboard.isEmpty()) addCommand(cmdCopyPlus);
-//#             }
+            if (cf.useClipBoard) {
+                addCommand(cmdCopy);
+                if (!clipboard.isEmpty()) addCommand(cmdCopyPlus);
+            }
 //#endif
             if (isHasScheme())
                 addCommand(cmdxmlSkin);
@@ -228,19 +225,19 @@
 //#endif
         }
 //#ifdef CLIPBOARD
-//#         if (cf.useClipBoard && !clipboard.isEmpty()) {
-//#             addCommand(cmdSendBuffer);
-//#         }
+        if (cf.useClipBoard && !clipboard.isEmpty()) {
+            addCommand(cmdSendBuffer);
+        }
 //#endif
 //#ifdef HISTORY
-//#         if (cf.saveHistory)
-//#             if (cf.msgPath!=null)
-//#                 if (!cf.msgPath.equals(""))
-//#                     if (contact.msgs.size()>0)
-//#                         addCommand(cmdSaveChat);
+        if (cf.saveHistory)
+            if (cf.msgPath!=null)
+                if (!cf.msgPath.equals(""))
+                    if (contact.msgs.size()>0)
+                        addCommand(cmdSaveChat);
 //#ifdef HISTORY_READER
-//#         if (cf.saveHistory && cf.lastMessages)
-//#             addCommand(cmdReadHistory);
+        if (cf.saveHistory && cf.lastMessages)
+            addCommand(cmdReadHistory);
 //#endif
 //#endif
         
@@ -248,8 +245,8 @@
 //#ifdef PLUGINS
 //#         if(sd.Juick) {
 //#endif
-//#         // http://code.google.com/p/bm2/issues/detail?id=94
-//#         addCommand(cmdJuickCommands);
+        // http://code.google.com/p/bm2/issues/detail?id=94
+        addCommand(cmdJuickCommands);
 //#ifdef PLUGINS
 //#         }
 //#endif
@@ -259,34 +256,34 @@
     }
     
 //#ifdef JUICK
-//#     private void updateJuickCommands() {
-//#         currentJuickCommands = null;
-//#         currentJuickCommands = new Vector();
-//#         currentJuickCommands.addElement(cmdJuickThings);
-//#         if (isJuickContact(contact) || isJuBoContact(contact)) {
-//#             String body = getBodyFromCurrentMsg();
-//#             String target = getTargetForJuickReply(body);
-//# 
-//#             if (!target.equals("toThings")) {
-//#                 switch (target.charAt(0)) {
-//#                     case '#':
-//#                         if (target.indexOf('/') < 0) {
-//#                             currentJuickCommands.addElement(cmdJuickPostRecommend);
-//#                             currentJuickCommands.addElement(cmdJuickPostShow);
-//#                         }
-//#                         currentJuickCommands.addElement(cmdJuickMessageReply);
-//#                         currentJuickCommands.addElement(cmdJuickMessageDelete);
-//#                         currentJuickCommands.addElement(cmdJuickPostSubscribe);
-//#                         currentJuickCommands.addElement(cmdJuickPostUnsubscribe);
-//#                         break;
-//#                     case '@':
-//#                         cmdJuickSendPrivateReply = new Command(SR.MS_JUICK_SEND_PRIVATE_REPLY +" "+ target, Command.SCREEN, 3);
-//#                         currentJuickCommands.addElement(cmdJuickSendPrivateReply);
-//#                         break;
-//#                 }
-//#             }
-//#         }
-//#     }
+    private void updateJuickCommands() {
+        currentJuickCommands = null;
+        currentJuickCommands = new Vector();
+        currentJuickCommands.addElement(cmdJuickThings);
+        if (isJuickContact(contact) || isJuBoContact(contact)) {
+            String body = getBodyFromCurrentMsg();
+            String target = getTargetForJuickReply(body);
+
+            if (!target.equals("toThings")) {
+                switch (target.charAt(0)) {
+                    case '#':
+                        if (target.indexOf('/') < 0) {
+                            currentJuickCommands.addElement(cmdJuickPostRecommend);
+                            currentJuickCommands.addElement(cmdJuickPostShow);
+                        }
+                        currentJuickCommands.addElement(cmdJuickMessageReply);
+                        currentJuickCommands.addElement(cmdJuickMessageDelete);
+                        currentJuickCommands.addElement(cmdJuickPostSubscribe);
+                        currentJuickCommands.addElement(cmdJuickPostUnsubscribe);
+                        break;
+                    case '@':
+                        cmdJuickSendPrivateReply = new Command(SR.MS_JUICK_SEND_PRIVATE_REPLY +" "+ target, Command.SCREEN, 3);
+                        currentJuickCommands.addElement(cmdJuickSendPrivateReply);
+                        break;
+                }
+            }
+        }
+    }
 //#endif
 
 public void showNotify() {
@@ -394,14 +391,14 @@
         }
 //#ifdef HISTORY
 //#ifdef HISTORY_READER
-//#         if (c==cmdReadHistory) {
-//#             new HistoryReader(display, contact);
-//#             return;
-//#         }
+        if (c==cmdReadHistory) {
+            new HistoryReader(display, contact);
+            return;
+        }
 //#endif
 //#endif
 //#if (FILE_IO && HISTORY)
-//#         if (c==cmdSaveChat) saveMessages();
+        if (c==cmdSaveChat) saveMessages();
 //#endif
         /** login-critical section */
         if (!sd.roster.isLoggedIn()) return;
@@ -430,231 +427,231 @@
         if (c==cmdUnsubscribed) sd.roster.sendPresence(contact.bareJid, "unsubscribed", null, false);
 
 //#ifdef CLIPBOARD
-//#         if (c==cmdSendBuffer) {
-//#             String from=sd.account.toString();
-//#             String body=clipboard.getClipBoard();
-//#             //String subj=null;
-//#             
-//#             String id=String.valueOf((int) System.currentTimeMillis());
-//#             Msg msg=new Msg(Msg.MESSAGE_TYPE_OUT,from,null,body);
-//#             msg.id=id;
-//#             msg.itemCollapsed=true;
-//#             
-//#             try {
-//#                 if (body!=null && body.length()>0) {
-//#                     sd.roster.sendMessage(contact, id, body, null, null);
-//#                     if (contact.origin!=Contact.ORIGIN_GROUPCHAT) contact.addMessage(msg);
-//#                 }
-//#             } catch (Exception e) {
-//#                 contact.addMessage(new Msg(Msg.MESSAGE_TYPE_OUT,from,null,"clipboard NOT sended"));
-//#             }
-//#             redraw();
-//#         }
+        if (c==cmdSendBuffer) {
+            String from=sd.account.toString();
+            String body=clipboard.getClipBoard();
+            //String subj=null;
+            
+            String id=String.valueOf((int) System.currentTimeMillis());
+            Msg msg=new Msg(Msg.MESSAGE_TYPE_OUT,from,null,body);
+            msg.id=id;
+            msg.itemCollapsed=true;
+            
+            try {
+                if (body!=null && body.length()>0) {
+                    sd.roster.sendMessage(contact, id, body, null, null);
+                    if (contact.origin!=Contact.ORIGIN_GROUPCHAT) contact.addMessage(msg);
+                }
+            } catch (Exception e) {
+                contact.addMessage(new Msg(Msg.MESSAGE_TYPE_OUT,from,null,"clipboard NOT sended"));
+            }
+            redraw();
+        }
 //#endif
         
 //#ifdef JUICK
-//#         String body = getBodyFromCurrentMsg();
-//#         if (c == cmdJuickMessageReply) {
-//#             juickAction("", body);
-//#         } else if (c == cmdJuickSendPrivateReply) {
-//#             juickAction("PM", body);
-//#         } else if (c == cmdJuickMessageDelete) {
-//#             juickAction("D", body);
-//#         } else if (c == cmdJuickPostSubscribe) {
-//#             juickAction("S", body);
-//#         } else if (c == cmdJuickPostUnsubscribe) {
-//#             juickAction("U", body);
-//#         } else if (c == cmdJuickPostRecommend) {
-//#             juickAction("!", body);
-//#         } else if (c == cmdJuickPostShow) {
-//#             juickAction("+", body);
-//#         } else if (c == cmdJuickThings) {
-//#             viewJuickThings(body, d);
-//#         } else if (c == cmdJuickCommands) {
-//#             updateJuickCommands();
-//#             new MyMenu(display, parentView, (Menu.MenuListener) this, SR.MS_COMMANDS, null, currentJuickCommands);
-//#         }
+        String body = getBodyFromCurrentMsg();
+        if (c == cmdJuickMessageReply) {
+            juickAction("", body);
+        } else if (c == cmdJuickSendPrivateReply) {
+            juickAction("PM", body);
+        } else if (c == cmdJuickMessageDelete) {
+            juickAction("D", body);
+        } else if (c == cmdJuickPostSubscribe) {
+            juickAction("S", body);
+        } else if (c == cmdJuickPostUnsubscribe) {
+            juickAction("U", body);
+        } else if (c == cmdJuickPostRecommend) {
+            juickAction("!", body);
+        } else if (c == cmdJuickPostShow) {
+            juickAction("+", body);
+        } else if (c == cmdJuickThings) {
+            viewJuickThings(body, d);
+        } else if (c == cmdJuickCommands) {
+            updateJuickCommands();
+            new MyMenu(display, parentView, (Menu.MenuListener) this, SR.MS_COMMANDS, null, currentJuickCommands);
+        }
 //#endif
     }
     
 //#ifdef JUICK
-//#     private String getBodyFromCurrentMsg() {
-//#         Msg msg = getMessage(cursor);
-//# 
-//#         if (msg != null) {
-//#             return msg.body;
-//#         } else {
-//#             return "";
-//#         }
-//#     }
-//# 
-//#     private void juickContactNotFound() {
+    private String getBodyFromCurrentMsg() {
+        Msg msg = getMessage(cursor);
+
+        if (msg != null) {
+            return msg.body;
+        } else {
+            return "";
+        }
+    }
+
+    private void juickContactNotFound() {
 //#ifdef POPUPS
-//#             setWobble(ui.controls.PopUp.TYPE_SYSTEM, "Juick", SR.MS_JUICK_CONTACT_NOT_FOUND);
+            setWobble(ui.controls.PopUp.TYPE_SYSTEM, "Juick", SR.MS_JUICK_CONTACT_NOT_FOUND);
 //#endif
-//#     }
-//# 
-//#     public void viewJuickThings(String str, Displayable pView) {
-//#         if (getActualJuickContact() == null) {
-//#             juickContactNotFound();
-//#             return;
-//#         }
-//#         char[] valueChars = str.toCharArray();
-//#         int msg_length = valueChars.length;
-//#         Vector things = new Vector();
-//#         for (int i = 0; i < msg_length; i++) {
-//#             if ((i == 0) || isCharBeforeJuickThing(valueChars[i - 1])) {
-//#                 switch (valueChars[i]) {
-//#                     case '#':
-//#                     case '@':
-//#                     case '*':
-//#                         char firstSymbol = valueChars[i];
-//#                         String thing = "" + firstSymbol;
-//#                         while (i < (msg_length - 1) && isCharFromJuickThing(valueChars[++i], firstSymbol)) {
-//#                             thing = thing + valueChars[i];
-//#                         }
-//#                         while (thing.charAt(thing.length() - 1) == '.') {
-//#                             thing = thing.substring(0, thing.length() - 1);
-//#                         }
-//#                         if ((thing.length() > 1) && (things.indexOf(thing) < 0)) {
-//#                             if (i < msg_length && ((firstSymbol == '*') && (valueChars[i] == '*'))) {
-//#                                 continue;
-//#                             }
-//#                             things.addElement(thing);
-//#                         }
-//#                         if (i > 0) {
-//#                             i--;
-//#                         }
-//#                         break;
-//#                 }
-//#             }
-//#         }
-//# 
-//#         if (things.isEmpty() && (isJuickContact(contact) || isJuBoContact(contact))) {
-//#             things.addElement("@top+");
-//#             things.addElement("#");
-//#             things.addElement("##");
-//#             things.addElement("###");
-//#             things.addElement("#+");
-//#             things.addElement("*");
-//#             things.addElement("@");
-//#             things.addElement("HELP");
-//#         }
-//# 
-//#         if (!things.isEmpty()) {
-//#             new JuickThingsMenu(things, display, pView, getActualJuickContact());
-//#         }
-//#     }
-//# 
-//#     public boolean isCharBeforeJuickThing(char ch) {
-//#         switch(ch) {
-//#             case '\u0020': // space
-//#             case '\u0009': // tab
-//#             case '\u000C': // formfeed
-//#             case '\n': // newline
-//#             case '\r': // carriage return
-//#             case '(':
-//#                 return true;
-//#         }
-//#         return false;
-//#     }
-//#     
-//#     public boolean isCharFromJuickThing(char ch, char type) {
-//#         boolean result = false;
-//#         switch(type) {
-//#             case '#': // #number
-//#                 result = (ch>46) && (ch<58); // '/', [0-9]
-//#                 break;
-//#             case '@': // @username
-//#                 result = ((ch>47)&&(ch<58)) // [0-9]
-//#                         || ((ch>63)&&(ch<91)) // '@', [A-Z]
-//#                         || ((ch>96)&&(ch<123)) // [a-z]
-//#                         || ((ch=='_')||(ch=='|'))
-//#                         || ((ch>44)&&(ch<47)); // [-.]
-//#                 break;
-//#             case '*': // *tag
-//#                 result = ((ch>42)&&(ch<58)) // [+,-./], [0-9]
-//#                         || ((ch>64)&&(ch<91)) // [A-Z]
-//#                         || ((ch>96)&&(ch<123)) // [a-z]
-//#                         || ((ch>1039)&&(ch<1104)) || ((ch==1105)||(ch==1025)) // [А-Я], [а-я], 'ё', 'Ё'
-//#                         || ((ch=='_')||(ch=='|')||(ch=='?')||(ch=='!')||(ch==39)) // '
-//#                         || ((ch>44)&&(ch<47)); // [-.]
-//#                 break;
-//#         }
-//#         return result;
-//#     }
-//# 
-//#     public String getTargetForJuickReply(String str) {
-//#         if ((str == null) || (str.equals("")))
-//#             return "toThings";
-//#         if (str.startsWith("Private message from @")) {
-//#             return str.substring(21, str.indexOf('\n')-1);
-//#         }
-//#         if ((str.charAt(0) != '@') && !str.startsWith("Recommended by @") && !str.startsWith("Reply by @"))
-//#             return "toThings";
-//#         int lastStrStartIndex = str.lastIndexOf('\n')+1;
-//#         if (lastStrStartIndex < 0)
-//#             return "toThings";
-//#         int numberEndsIndex = str.indexOf(" http://juick.com/", lastStrStartIndex);
-//#         if (numberEndsIndex>0) {
-//#             numberEndsIndex = str.indexOf(' ', lastStrStartIndex);
-//#             return str.substring(lastStrStartIndex, numberEndsIndex);
-//#         }
-//#         return "toThings";
-//#     }
-//# 
-//#     public void juickAction(String action, String body) {
-//#         if (getActualJuickContact() == null) {
-//#             juickContactNotFound();
-//#             return;
-//#         }
-//#         String target = getTargetForJuickReply(body);
-//#         if ((action.equals("S") || action.equals("U")) && (target.indexOf("/") > 0)) {
-//#             target = target.substring(0, target.indexOf("/"));
-//#         } else if (action.equals("PM") || action.equals("")) {
-//#             target+=" ";
-//#         }
-//#         String resultAction = action + " " + target;
-//# 
-//#         if (action.equals("+") || action.equals("")) {
-//#             resultAction = target+action;
-//#         }
-//#         try {
+    }
+
+    public void viewJuickThings(String str, Displayable pView) {
+        if (getActualJuickContact() == null) {
+            juickContactNotFound();
+            return;
+        }
+        char[] valueChars = str.toCharArray();
+        int msg_length = valueChars.length;
+        Vector things = new Vector();
+        for (int i = 0; i < msg_length; i++) {
+            if ((i == 0) || isCharBeforeJuickThing(valueChars[i - 1])) {
+                switch (valueChars[i]) {
+                    case '#':
+                    case '@':
+                    case '*':
+                        char firstSymbol = valueChars[i];
+                        String thing = "" + firstSymbol;
+                        while (i < (msg_length - 1) && isCharFromJuickThing(valueChars[++i], firstSymbol)) {
+                            thing = thing + valueChars[i];
+                        }
+                        while (thing.charAt(thing.length() - 1) == '.') {
+                            thing = thing.substring(0, thing.length() - 1);
+                        }
+                        if ((thing.length() > 1) && (things.indexOf(thing) < 0)) {
+                            if (i < msg_length && ((firstSymbol == '*') && (valueChars[i] == '*'))) {
+                                continue;
+                            }
+                            things.addElement(thing);
+                        }
+                        if (i > 0) {
+                            i--;
+                        }
+                        break;
+                }
+            }
+        }
+
+        if (things.isEmpty() && (isJuickContact(contact) || isJuBoContact(contact))) {
+            things.addElement("@top+");
+            things.addElement("#");
+            things.addElement("##");
+            things.addElement("###");
+            things.addElement("#+");
+            things.addElement("*");
+            things.addElement("@");
+            things.addElement("HELP");
+        }
+
+        if (!things.isEmpty()) {
+            new JuickThingsMenu(things, display, pView, getActualJuickContact());
+        }
+    }
+
+    public boolean isCharBeforeJuickThing(char ch) {
+        switch(ch) {
+            case '\u0020': // space
+            case '\u0009': // tab
+            case '\u000C': // formfeed
+            case '\n': // newline
+            case '\r': // carriage return
+            case '(':
+                return true;
+        }
+        return false;
+    }
+    
+    public boolean isCharFromJuickThing(char ch, char type) {
+        boolean result = false;
+        switch(type) {
+            case '#': // #number
+                result = (ch>46) && (ch<58); // '/', [0-9]
+                break;
+            case '@': // @username
+                result = ((ch>47)&&(ch<58)) // [0-9]
+                        || ((ch>63)&&(ch<91)) // '@', [A-Z]
+                        || ((ch>96)&&(ch<123)) // [a-z]
+                        || ((ch=='_')||(ch=='|'))
+                        || ((ch>44)&&(ch<47)); // [-.]
+                break;
+            case '*': // *tag
+                result = ((ch>42)&&(ch<58)) // [+,-./], [0-9]
+                        || ((ch>64)&&(ch<91)) // [A-Z]
+                        || ((ch>96)&&(ch<123)) // [a-z]
+                        || ((ch>1039)&&(ch<1104)) || ((ch==1105)||(ch==1025)) // [А-Я], [а-я], 'ё', 'Ё'
+                        || ((ch=='_')||(ch=='|')||(ch=='?')||(ch=='!')||(ch==39)) // '
+                        || ((ch>44)&&(ch<47)); // [-.]
+                break;
+        }
+        return result;
+    }
+
+    public String getTargetForJuickReply(String str) {
+        if ((str == null) || (str.equals("")))
+            return "toThings";
+        if (str.startsWith("Private message from @")) {
+            return str.substring(21, str.indexOf('\n')-1);
+        }
+        if ((str.charAt(0) != '@') && !str.startsWith("Recommended by @") && !str.startsWith("Reply by @"))
+            return "toThings";
+        int lastStrStartIndex = str.lastIndexOf('\n')+1;
+        if (lastStrStartIndex < 0)
+            return "toThings";
+        int numberEndsIndex = str.indexOf(" http://juick.com/", lastStrStartIndex);
+        if (numberEndsIndex>0) {
+            numberEndsIndex = str.indexOf(' ', lastStrStartIndex);
+            return str.substring(lastStrStartIndex, numberEndsIndex);
+        }
+        return "toThings";
+    }
+
+    public void juickAction(String action, String body) {
+        if (getActualJuickContact() == null) {
+            juickContactNotFound();
+            return;
+        }
+        String target = getTargetForJuickReply(body);
+        if ((action.equals("S") || action.equals("U")) && (target.indexOf("/") > 0)) {
+            target = target.substring(0, target.indexOf("/"));
+        } else if (action.equals("PM") || action.equals("")) {
+            target+=" ";
+        }
+        String resultAction = action + " " + target;
+
+        if (action.equals("+") || action.equals("")) {
+            resultAction = target+action;
+        }
+        try {
 //#ifdef RUNNING_MESSAGE
 //#                 sd.roster.me=new MessageEdit(display, this, getActualJuickContact(), resultAction);
 //#else
-//#             new MessageEdit(display, this, getActualJuickContact(), resultAction);
+            new MessageEdit(this, getActualJuickContact(), resultAction);
 //#endif
-//#             } catch (Exception e) {/*no messages*/}
-//#     }
-//# 
-//# 
-//#     public boolean isJuickContact(Contact c) {
-//#         return sd.roster.isJuickContact(c);
-//#     }
-//# 
-//#     public boolean isJuBoContact(Contact c) {
-//#         return (c.bareJid.equals("jubo@nologin.ru")
-//#          || c.bareJid.startsWith("jubo%jubo.ru@"));
-//#     }
-//# 
-//#     public boolean noRedirrectToJuickContact(Contact c) {
-//#         return (isJuickContact(c)
-//#          || c.bareJid.equals("implusplus@gmail.com")
-//#          || c.bareJid.startsWith("implusplus%gmail.com@")
-//#          || c.bareJid.equals("tweet@excla.im")
-//#          || c.bareJid.startsWith("tweet%excla.im@")
-//#          || c.bareJid.endsWith("@twitter.tweet.im")
-//#          || (c.bareJid.indexOf("%twitter.tweet.im@") >= 0)
-//#          || c.bareJid.equals("twitter@t2p.me")
-//#          || c.bareJid.startsWith("twitter%t2p.me@")); // Not tested (2010-04-12)
-//#     }
-//# 
-//#     private Contact getActualJuickContact() {
-//#         if (noRedirrectToJuickContact(contact))
-//#             return contact;
-//#         else return sd.roster.getMainJuickContact();
-//#     }
+            } catch (Exception e) {/*no messages*/}
+    }
+
+
+    public boolean isJuickContact(Contact c) {
+        return sd.roster.isJuickContact(c);
+    }
+
+    public boolean isJuBoContact(Contact c) {
+        return (c.bareJid.equals("jubo@nologin.ru")
+         || c.bareJid.startsWith("jubo%jubo.ru@"));
+    }
+
+    public boolean noRedirrectToJuickContact(Contact c) {
+        return (isJuickContact(c)
+         || c.bareJid.equals("implusplus@gmail.com")
+         || c.bareJid.startsWith("implusplus%gmail.com@")
+         || c.bareJid.equals("tweet@excla.im")
+         || c.bareJid.startsWith("tweet%excla.im@")
+         || c.bareJid.endsWith("@twitter.tweet.im")
+         || (c.bareJid.indexOf("%twitter.tweet.im@") >= 0)
+         || c.bareJid.equals("twitter@t2p.me")
+         || c.bareJid.startsWith("twitter%t2p.me@")); // Not tested (2010-04-12)
+    }
+
+    private Contact getActualJuickContact() {
+        if (noRedirrectToJuickContact(contact))
+            return contact;
+        else return sd.roster.getMainJuickContact();
+    }
 //#endif
 
     public void clearReadedMessageList() {
@@ -678,10 +675,10 @@
 //#ifdef PLUGINS
 //#         if (sd.Juick)
 //#endif
-//#         if (isJuickContact(contact) || isJuBoContact(contact)) {
-//#             if (juickPoundFork())
-//#                 return;
-//#         }
+        if (isJuickContact(contact) || isJuBoContact(contact)) {
+            if (juickPoundFork())
+                return;
+        }
 //#endif
         keyGreen();
     }
@@ -692,7 +689,7 @@
 //#ifdef RUNNING_MESSAGE
 //#         sd.roster.me=new MessageEdit(display, this, contact, contact.msgSuspended);
 //#else
-        new MessageEdit(display, this, contact, contact.msgSuspended);
+        new MessageEdit(this, contact, contact.msgSuspended);
 //#endif
         contact.msgSuspended=null;
     }
@@ -710,25 +707,25 @@
     }
 
 //#ifdef JUICK    
-//#     public boolean juickPoundFork() { // Fork — это развилка.
-//#         String body = getBodyFromCurrentMsg();
-//#         String target = getTargetForJuickReply(body);
-//#         if (target.equals("toThings")) {
-//#             viewJuickThings(body, this);
-//#         } else {
-//#             switch (target.charAt(0)) {
-//#                 case '#':
-//#                     if (getActualJuickContact() == null)
-//#                         return false;
-//#                     juickAction("", body);
-//#                     break;
-//#                 case '@':
-//#                     juickAction("PM", body);
-//#                     break;
-//#             }
-//#         }
-//#         return true;
-//#     }
+    public boolean juickPoundFork() { // Fork — это развилка.
+        String body = getBodyFromCurrentMsg();
+        String target = getTargetForJuickReply(body);
+        if (target.equals("toThings")) {
+            viewJuickThings(body, this);
+        } else {
+            switch (target.charAt(0)) {
+                case '#':
+                    if (getActualJuickContact() == null)
+                        return false;
+                    juickAction("", body);
+                    break;
+                case '@':
+                    juickAction("PM", body);
+                    break;
+            }
+        }
+        return true;
+    }
 //#endif
 
     public void keyPressed(int keyCode) {
@@ -744,10 +741,10 @@
 //#ifdef PLUGINS
 //#         if (sd.Juick)
 //#endif
-//#             if (isJuickContact(contact) || isJuBoContact(contact)) {
-//#                 if (juickPoundFork())
-//#                     return;
-//#             }
+            if (isJuickContact(contact) || isJuBoContact(contact)) {
+                if (juickPoundFork())
+                    return;
+            }
 //#endif
             keyGreen();
             return;
@@ -793,7 +790,7 @@
 //#ifdef RUNNING_MESSAGE
 //#                 sd.roster.me=new MessageEdit(display, this, contact, msg.from+": ");
 //#else
-                new MessageEdit(display, this, contact, msg.from + ": ");
+                new MessageEdit(this, contact, msg.from + ": ");
 //#endif
             }
         } catch (Exception e) {/*no messages*/}
@@ -813,7 +810,7 @@
 //#ifdef RUNNING_MESSAGE
 //#             sd.roster.me=new MessageEdit(display, this, contact, msg);
 //#else
-            new MessageEdit(display, this, contact, msg);
+            new MessageEdit(this, contact, msg);
 //#endif
             msg=null;
         } catch (Exception e) {/*no messages*/}
@@ -848,46 +845,46 @@
 //#         return false;
 //#     }
 //#endif
-//# 
-//#     private void saveMessages() {
-//#         StringBuffer histRecord=new StringBuffer("chatlog_");
+
+    private void saveMessages() {
+        StringBuffer histRecord=new StringBuffer("chatlog_");
 //#ifndef WMUC
-//#         if (contact instanceof MucContact) {
-//#             if (contact.origin>=Contact.ORIGIN_GROUPCHAT) {
-//#                 histRecord.append(contact.bareJid);
-//#             } else {
-//#                 String nick=contact.getJid();
-//#                 int rp=nick.indexOf('/');
-//#                 histRecord.append(nick.substring(rp+1)).append("_").append(nick.substring(0, rp));
-//#                 nick=null;
-//#             }
-//#         } else {
+        if (contact instanceof MucContact) {
+            if (contact.origin>=Contact.ORIGIN_GROUPCHAT) {
+                histRecord.append(contact.bareJid);
+            } else {
+                String nick=contact.getJid();
+                int rp=nick.indexOf('/');
+                histRecord.append(nick.substring(rp+1)).append("_").append(nick.substring(0, rp));
+                nick=null;
+            }
+        } else {
 //#endif
-//#             histRecord.append(contact.bareJid);
+            histRecord.append(contact.bareJid);
 //#ifndef WMUC
-//#         }
+        }
 //#endif
-//#         StringBuffer messageList=new StringBuffer();
-//#         if (startSelection) {
-//#             for (Enumeration select=contact.msgs.elements(); select.hasMoreElements(); ) {
-//#                 Msg mess=(Msg) select.nextElement();
-//#                 if (mess.selected) {
-//#                     messageList.append(mess.quoteString()).append("\n").append("\n");
-//#                     mess.selected=false;
-//#                     mess.highlite = mess.oldHighlite;
-//#                 }
-//#             }
-//#             startSelection = false;
-//#         } else {
-//#             for (Enumeration cmessages=contact.msgs.elements(); cmessages.hasMoreElements(); ) {
-//#                 Msg message=(Msg) cmessages.nextElement();
-//#                 messageList.append(message.quoteString()).append("\n").append("\n");
-//#             }
-//#         }
-//#         HistoryAppend.getInstance().addMessageList(messageList.toString(), histRecord.toString());
-//#         messageList=null;
-//#         histRecord=null;
-//#     }
+        StringBuffer messageList=new StringBuffer();
+        if (startSelection) {
+            for (Enumeration select=contact.msgs.elements(); select.hasMoreElements(); ) {
+                Msg mess=(Msg) select.nextElement();
+                if (mess.selected) {
+                    messageList.append(mess.quoteString()).append("\n").append("\n");
+                    mess.selected=false;
+                    mess.highlite = mess.oldHighlite;
+                }
+            }
+            startSelection = false;
+        } else {
+            for (Enumeration cmessages=contact.msgs.elements(); cmessages.hasMoreElements(); ) {
+                Msg message=(Msg) cmessages.nextElement();
+                messageList.append(message.quoteString()).append("\n").append("\n");
+            }
+        }
+        HistoryAppend.getInstance().addMessageList(messageList.toString(), histRecord.toString());
+        messageList=null;
+        histRecord=null;
+    }
 //#endif
     
     public final void smartPurge() {
